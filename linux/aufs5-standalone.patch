SPDX-License-Identifier: GPL-2.0
aufs5.4 standalone patch

diff -Naur linux-5.4.1ORIG/fs/dcache.c linux-5.4.1/fs/dcache.c
--- linux-5.4.1ORIG/fs/dcache.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/dcache.c	2019-12-01 11:07:14.769829701 +0800
@@ -1369,6 +1369,7 @@
 	seq = 1;
 	goto again;
 }
+EXPORT_SYMBOL_GPL(d_walk);
 
 struct check_mount {
 	struct vfsmount *mnt;
@@ -2914,6 +2915,7 @@
 
 	write_sequnlock(&rename_lock);
 }
+EXPORT_SYMBOL_GPL(d_exchange);
 
 /**
  * d_ancestor - search for an ancestor
diff -Naur linux-5.4.1ORIG/fs/exec.c linux-5.4.1/fs/exec.c
--- linux-5.4.1ORIG/fs/exec.c	2019-12-01 11:01:58.566503785 +0800
+++ linux-5.4.1/fs/exec.c	2019-12-01 11:08:43.016494297 +0800
@@ -110,6 +110,7 @@
 	return (path->mnt->mnt_flags & MNT_NOEXEC) ||
 	       (path->mnt->mnt_sb->s_iflags & SB_I_NOEXEC);
 }
+EXPORT_SYMBOL_GPL(path_noexec);
 
 #ifdef CONFIG_USELIB
 /*
diff -Naur linux-5.4.1ORIG/fs/fcntl.c linux-5.4.1/fs/fcntl.c
--- linux-5.4.1ORIG/fs/fcntl.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/fcntl.c	2019-12-01 11:10:06.336492343 +0800
@@ -83,6 +83,7 @@
  out:
 	return error;
 }
+EXPORT_SYMBOL_GPL(setfl);
 
 static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,
                      int force)
diff -Naur linux-5.4.1ORIG/fs/file_table.c linux-5.4.1/fs/file_table.c
--- linux-5.4.1ORIG/fs/file_table.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/file_table.c	2019-12-01 11:13:53.086487024 +0800
@@ -162,6 +162,7 @@
 	}
 	return ERR_PTR(-ENFILE);
 }
+EXPORT_SYMBOL_GPL(alloc_empty_file);
 
 /*
  * Variant of alloc_empty_file() that doesn't check and modify nr_files.
@@ -375,6 +376,7 @@
 }
 
 EXPORT_SYMBOL(fput);
+EXPORT_SYMBOL_GPL(__fput_sync);
 
 void __init files_init(void)
 {
diff -Naur linux-5.4.1ORIG/fs/inode.c linux-5.4.1/fs/inode.c
--- linux-5.4.1ORIG/fs/inode.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/inode.c	2019-12-01 11:15:23.543151569 +0800
@@ -1682,6 +1682,7 @@
 
 	return update_time(inode, time, flags);
 }
+EXPORT_SYMBOL_GPL(update_time);
 
 /**
  *	touch_atime	-	update the access time
diff -Naur linux-5.4.1ORIG/fs/namespace.c linux-5.4.1/fs/namespace.c
--- linux-5.4.1ORIG/fs/namespace.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/namespace.c	2019-12-01 11:22:30.689808215 +0800
@@ -431,6 +431,7 @@
 	mnt_dec_writers(real_mount(mnt));
 	preempt_enable();
 }
+EXPORT_SYMBOL_GPL(__mnt_drop_write);
 
 /**
  * mnt_drop_write - give up write access to a mount
@@ -1897,6 +1898,7 @@
 	}
 	return 0;
 }
+EXPORT_SYMBOL_GPL(iterate_mounts);
 
 static void lock_mnt_tree(struct mount *mnt)
 {
diff -Naur linux-5.4.1ORIG/fs/notify/group.c linux-5.4.1/fs/notify/group.c
--- linux-5.4.1ORIG/fs/notify/group.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/notify/group.c	2019-12-01 11:24:05.666472654 +0800
@@ -99,6 +99,7 @@
 {
 	refcount_inc(&group->refcnt);
 }
+EXPORT_SYMBOL_GPL(fsnotify_get_group);
 
 /*
  * Drop a reference to a group.  Free it if it's through.
diff -Naur linux-5.4.1ORIG/fs/open.c linux-5.4.1/fs/open.c
--- linux-5.4.1ORIG/fs/open.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/open.c	2019-12-01 11:29:45.823131341 +0800
@@ -65,6 +65,7 @@
 	inode_unlock(dentry->d_inode);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(do_truncate);
 
 long vfs_truncate(const struct path *path, loff_t length)
 {
diff -Naur linux-5.4.1ORIG/fs/read_write.c linux-5.4.1/fs/read_write.c
--- linux-5.4.1ORIG/fs/read_write.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/read_write.c	2019-12-01 11:34:22.636458181 +0800
@@ -468,6 +468,7 @@
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_read);
 
 static ssize_t new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
 {
@@ -566,6 +567,7 @@
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_write);
 
 /* file_ppos returns &file->f_pos or NULL if file is stream */
 static inline loff_t *file_ppos(struct file *file)
diff -Naur linux-5.4.1ORIG/fs/splice.c linux-5.4.1/fs/splice.c
--- linux-5.4.1ORIG/fs/splice.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/splice.c	2019-12-01 11:37:04.346454388 +0800
@@ -847,6 +847,7 @@
 
 	return splice_write(pipe, out, ppos, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_from);
 
 /*
  * Attempt to initiate a splice from a file to a pipe.
@@ -876,6 +877,7 @@
 
 	return splice_read(in, ppos, pipe, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_to);
 
 /**
  * splice_direct_to_actor - splices data directly between two non-pipes
diff -Naur linux-5.4.1ORIG/fs/sync.c linux-5.4.1/fs/sync.c
--- linux-5.4.1ORIG/fs/sync.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/sync.c	2019-12-01 11:38:51.796451867 +0800
@@ -39,6 +39,7 @@
 		sb->s_op->sync_fs(sb, wait);
 	return __sync_blockdev(sb->s_bdev, wait);
 }
+EXPORT_SYMBOL_GPL(__sync_filesystem);
 
 /*
  * Write out and wait upon all dirty data associated with this
diff -Naur linux-5.4.1ORIG/fs/xattr.c linux-5.4.1/fs/xattr.c
--- linux-5.4.1ORIG/fs/xattr.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/fs/xattr.c	2019-12-01 11:40:26.433116313 +0800
@@ -296,6 +296,7 @@
 	*xattr_value = value;
 	return error;
 }
+EXPORT_SYMBOL_GPL(vfs_getxattr_alloc);
 
 ssize_t
 __vfs_getxattr(struct dentry *dentry, struct inode *inode, const char *name,
diff -Naur linux-5.4.1ORIG/kernel/task_work.c linux-5.4.1/kernel/task_work.c
--- linux-5.4.1ORIG/kernel/task_work.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/kernel/task_work.c	2019-12-01 11:44:10.169777732 +0800
@@ -40,6 +40,7 @@
 		set_notify_resume(task);
 	return 0;
 }
+EXPORT_SYMBOL_GPL(task_work_run);
 
 /**
  * task_work_cancel - cancel a pending work added by task_work_add()
diff -Naur linux-5.4.1ORIG/security/device_cgroup.c linux-5.4.1/security/device_cgroup.c
--- linux-5.4.1ORIG/security/device_cgroup.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/security/device_cgroup.c	2019-12-01 11:45:56.289775243 +0800
@@ -824,3 +824,4 @@
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(__devcgroup_check_permission);
diff -Naur linux-5.4.1ORIG/security/security.c linux-5.4.1/security/security.c
--- linux-5.4.1ORIG/security/security.c	2019-11-25 08:32:01.000000000 +0800
+++ linux-5.4.1/security/security.c	2019-12-01 11:54:27.819763243 +0800
@@ -1036,6 +1036,7 @@
 		return 0;
 	return call_int_hook(path_rmdir, 0, dir, dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_rmdir);
 
 int security_path_unlink(const struct path *dir, struct dentry *dentry)
 {
@@ -1052,6 +1053,7 @@
 		return 0;
 	return call_int_hook(path_symlink, 0, dir, dentry, old_name);
 }
+EXPORT_SYMBOL_GPL(security_path_symlink);
 
 int security_path_link(struct dentry *old_dentry, const struct path *new_dir,
 		       struct dentry *new_dentry)
@@ -1060,6 +1062,7 @@
 		return 0;
 	return call_int_hook(path_link, 0, old_dentry, new_dir, new_dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_link);
 
 int security_path_rename(const struct path *old_dir, struct dentry *old_dentry,
 			 const struct path *new_dir, struct dentry *new_dentry,
@@ -1087,6 +1090,7 @@
 		return 0;
 	return call_int_hook(path_truncate, 0, path);
 }
+EXPORT_SYMBOL_GPL(security_path_truncate);
 
 int security_path_chmod(const struct path *path, umode_t mode)
 {
@@ -1094,6 +1098,7 @@
 		return 0;
 	return call_int_hook(path_chmod, 0, path, mode);
 }
+EXPORT_SYMBOL_GPL(security_path_chmod);
 
 int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
 {
@@ -1101,6 +1106,7 @@
 		return 0;
 	return call_int_hook(path_chown, 0, path, uid, gid);
 }
+EXPORT_SYMBOL_GPL(security_path_chown);
 
 int security_path_chroot(const struct path *path)
 {
@@ -1201,6 +1207,7 @@
 		return 0;
 	return call_int_hook(inode_permission, 0, inode, mask);
 }
+EXPORT_SYMBOL_GPL(security_inode_permission);
 
 int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
 {
@@ -1378,6 +1385,7 @@
 
 	return fsnotify_perm(file, mask);
 }
+EXPORT_SYMBOL_GPL(security_file_permission);
 
 int security_file_alloc(struct file *file)
 {
